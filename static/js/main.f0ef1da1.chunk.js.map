{"version":3,"sources":["Header.js","Footer.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","console","log","Footer","footerAdd","Content","App","topMenu","attempt","footerMenu","attempt2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NAwCeA,MArCf,SAAgBC,GAsBZ,OACI,yBAAKC,UAAW,eAIZ,4BAAQA,UAAW,WAAYC,QAzB3B,WACRC,QAAQC,IAAI,mBAwBR,SACA,4BAAQH,UAAW,WAAYC,QAtB1B,WACTC,QAAQC,IAAI,mBAqBR,SACA,4BAAQH,UAAW,WAAYC,QApB1B,WACTC,QAAQC,IAAI,oBAmBR,UACA,4BAAQH,UAAW,WAAYC,QAlB1B,WACTC,QAAQC,IAAI,sBAiBR,YACA,4BAAQH,UAAW,WAAYC,QAhB1B,WACTC,QAAQC,IAAI,kBAeR,UCmBGC,MA/Cf,SAAgBL,GACZ,IACMM,EAAY,WACdH,QAAQC,IAAI,qBAahB,OACI,yBAAKH,UAAU,eACX,4BAAQA,UAAW,WAAYC,QAASI,GAAxC,YACA,4BAAQL,UAAW,WAAYC,QAASI,GAAxC,YACA,4BAAQL,UAAW,WAAYC,QAXpB,WACfC,QAAQC,IAAI,oBAUR,UACA,4BAAQH,UAAW,WAAYC,QATpB,WACfC,QAAQC,IAAI,oBAQR,UACA,+BCoBGG,MAxCf,SAAiBP,GACb,OACI,6BACI,wRAKA,wWAMA,+OCUGQ,MAxBf,WAaI,OACI,6BACI,8CACA,kBAAC,EAAD,CAAQC,QAfA,CAAC,QAAS,QAAS,SAAU,WAAY,QAevBC,QAbnB,WACXP,QAAQC,IAAI,WAaR,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQO,WAhBG,CAAC,WAAY,YAAa,SAAU,SAAU,QAAS,aAgBlCC,SAZxB,WACZT,QAAQC,IAAI,cCHAS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.f0ef1da1.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Header(props) {\n\n    const add = () => {\n        console.log('This is About')\n        // props.attempt('shark')\n    };\n    const add1 = () => {\n        console.log('This is Price')\n    }\n    const add2 = () => {\n        console.log('This is System')\n    }\n    const add3 = () => {\n        console.log('This is Contacts')\n    }\n    const add4 = () => {\n        console.log('This is List')\n    }\n    // const add = (button) => {\n    //     console.log('ADD')\n    //     props.attempt()\n    // }\n    return (\n        <div className={'app -header'}>\n            {/*<ul>*/}\n            {/*    {props.topMenu.map(el => <li key={el}>{el}</li>)}*/}\n            {/*</ul>*/}\n            <button className={'myButton'} onClick={add}>About</button>\n            <button className={'myButton'} onClick={add1}>Price</button>\n            <button className={'myButton'} onClick={add2}>System</button>\n            <button className={'myButton'} onClick={add3}>Contacts</button>\n            <button className={'myButton'} onClick={add4}>List</button>\n            {/*{props.arr.map(el => {<button className={'myButton'} onClick={() => add({el})}>{el}</button>})*/}\n        </div>\n    );\n}\n\nexport default Header;\n\n\n{/*<button className={'myButton'}>Add</button>*/\n}\n{/*This is Header {props.version}*/\n}\n{/*  <Logo/>*/\n}\n{/*<TopMenue topMenuItem = {topMenuItem}/>*/\n}\n{/*  <ul>*/\n}\n{/*      {props.topMenu.map(el => <li key={el}>{el}</li>)}*/\n}\n{/*  </ul>*/\n}\n{/*<ul>*/\n}\n{/*    {props.menu.map(el => <li key={el}>{el}</li>)}*/\n}\n{/*    {props.menu.map(el => <MenuItem key = {el} item = {el}/>)}*/\n}\n{/*</ul>*/\n}","import React from 'react';\nimport Footer1 from \"./Footer1\";\nimport Footer2 from \"./Footer2\";\nimport Footer3 from \"./Footer3\";\n\n\nfunction Footer(props) {\n    const footerMenuItem = ['Finance', 'Laws', 'Taxes', 'Income', 'Deductions', 'Credits', 'Strategy']\n    const footerAdd = () => {\n        console.log('This is Concepts')\n        // props.attempt2('shark - footer')\n    };\n    const footerAdd1 = () => {\n        console.log('This is Strategy')\n    }\n    const footerAdd2 = () => {\n        console.log('This is Credit')\n    }\n    const footerAdd3 = () => {\n        console.log('This is Finder')\n    }\n\n    return (\n        <div className=' app-footer'>\n            <button className={'myButton'} onClick={footerAdd}>Concepts</button>\n            <button className={'myButton'} onClick={footerAdd}>Strategy</button>\n            <button className={'myButton'} onClick={footerAdd2}>Credit</button>\n            <button className={'myButton'} onClick={footerAdd3}>Finder</button>\n            <ul>\n                {/*{props.footerMenu.map(el=><li key={el}>{el}</li>)}*/}\n\n            </ul>\n            {/*<h1>Footer {props.v}</h1>*/}\n            {/*<Footer1/>*/}\n            {/*<Footer2/>*/}\n            {/*<Footer3/>*/}\n            {/*<FooterMenue footerMenuItem = {footerMenuItem}/>*/}\n\n            {/*<ul>*/}\n            {/*    {*/}\n            {/*    [*/}\n            {/*    <li key='1'>{props.list[0]}</li>,*/}\n            {/*    <li key ='2'>{props.list[1]}</li>,*/}\n            {/*    <li key = '3'>{props.list[2]}</li>*/}\n            {/*    ]*/}\n            {/*    }*/}\n\n            {/*    <hr/>*/}\n            {/*</ul>*/}\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\n\nimport './App.css';\n\nimport Content1 from \"./Content1\";\nimport Content2 from \"./Content2\";\nimport Content3 from \"./Content3\";\n\nfunction Content(props) {\n    return (\n        <div>\n            <p>\n                You can see what we’ll be building here: Final Result. If the code doesn’t make sense to you, or if you\n                are unfamiliar with the code’s syntax, don’t worry! The goal of this tutorial is to help you understand\n                React and its syntax.\n            </p>\n            <p>\n                We recommend that you check out the tic-tac-toe game before continuing with the tutorial. One of the\n                features that you’ll notice is that there is a numbered list to the right of the game’s board. This list\n                gives you a history of all of the moves that have occurred in the game, and it is updated as the game\n                progresses.\n            </p>\n            <p>\n                You can close the tic-tac-toe game once you’re familiar with it. We’ll be starting from a simpler\n                template in this tutorial. Our next step is to set you up so that you can start building the game.\n            </p>\n            {/*<h1>Content</h1>*/}\n            {/*<Content1/>*/}\n            {/*<Content2/>*/}\n            {/*<Content3/>*/}\n\n            {/*<ul>*/}\n            {/*    {[*/}\n            {/*        <li key='1'>{props.tasks[0]}</li>,*/}\n            {/*        <li key='2'>{props.tasks[1]}</li>,*/}\n            {/*        <li key='3'>{props.tasks[2]}</li>,*/}\n            {/*        <li key='4'>{props.tasks[3]}</li>,*/}\n            {/*        <li key='5'>{props.tasks[4]}</li>*/}\n            {/*    ]*/}\n            {/*    }*/}\n            {/*</ul>*/}\n            {/*<ul>*/}\n            {/*    {props.tasks.map(el => <li key={el}>{el}</li>)}*/}\n            {/*</ul>*/}\n        </div>\n    );\n}\n\nexport default Content;\n","import React from 'react';\n\nimport './App.css';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Content from \"./Content\";\n\n\nfunction App() {\n    const topMenu = ['About', 'Price', 'System', 'Contacts', 'List']\n    const footerMenu = ['Concepts', 'Structure', 'Images', 'Tables', 'Forms', 'Carousels']\n    const fisher = () => {\n        console.log('Pull')\n    }\n    const fisher2 = () => {\n        console.log('Pull2')\n    }\n\n    // const fisher = () => {\n    //     console.log('Pull')\n    // }\n    return (\n        <div>\n            <h1>Intro in React</h1>\n            <Header topMenu={topMenu} attempt={fisher}/>\n            <Content/>\n            <Footer footerMenu={footerMenu} attempt2={fisher2}/>\n            {/*<Header arr={arr} attempt={fisher}/>*/}\n        </div>\n    );\n}\n\nexport default App;\n\n\n{/*<Header version={appVersion} topMenu={topMenu}/>*/\n}\n{/*<h1>Header</h1>*/\n}\n\n{/*<p>tekst f or m (definite singular teksta or teksten, indefinite plural tekster, definite plural*/\n}\n{/*    tekstene)</p>*/\n}\n{/*<Content/>*/\n}\n{/*<p>This entry needs quotations to illustrate usage. If you come across any interesting, durably archived*/\n}\n{/*    quotes then please add them!</p>*/\n}\n{/*<Footer v={appVersion} footerMenue={footerMenu}/>*/\n}\n\n\n// const appVersion = '0.2.321';\n//\n//\n// const list = ['Contact', 'List', 'Phones']","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}